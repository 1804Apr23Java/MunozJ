--Create a database with two tables:
--EMPLOYEE
--Columns: EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL
--DEPARTMENT:
--Columns: DEPARTMENT_ID, DEPARTMENT_NAME

--DROP TABLE EMPLOYEE;
--DROP TABLE DEPARTMENT;


CREATE TABLE EMPLOYEE( 
  EMPLOYEE_ID NUMBER(10) NOT NULL,
  EMPLOYEE_FIRSTNAME VARCHAR2(50) NOT NULL,
  EMPLOYEE_LASTNAME VARCHAR2(50),
  DEPARTMENT_ID NUMBER(10),
  SALARY NUMBER,
  EMP_EMAIL VARCHAR2(100)
);
/

CREATE TABLE DEPARTMENT(
  DEPARTMENT_ID NUMBER(10) NOT NULL,
  DEPARTMENT_NAME VARCHAR2(100)
);


--Create a sequence and trigger to auto-generate primary key values for both tables. 

ALTER TABLE EMPLOYEE ADD (
  CONSTRAINT emp_pk PRIMARY KEY (EMPLOYEE_ID));

CREATE SEQUENCE emp_seq START WITH 1;

CREATE OR REPLACE TRIGGER TR_emp_insert
  BEFORE INSERT ON EMPLOYEE
  FOR EACH ROW
BEGIN
  SELECT emp_seq.nextval
  INTO :new.EMPLOYEE_ID
  FROM dual;
END;
/


ALTER TABLE DEPARTMENT ADD (
  CONSTRAINT dep_pk PRIMARY KEY (DEPARTMENT_ID));

CREATE SEQUENCE dep_seq START WITH 1;

CREATE OR REPLACE TRIGGER TR_dep_insert
  BEFORE INSERT ON DEPARTMENT
  FOR EACH ROW
BEGIN
  SELECT dep_seq.nextval
  INTO :new.DEPARTMENT_ID
  FROM dual;
END;

/

--Insert at least six employees and three departments. 
INSERT INTO EMPLOYEE (EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
 VALUES ('BRUCE', 'WAYNE', 1, 1000000, 'B@WYNE.COM');
INSERT INTO EMPLOYEE (EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
 VALUES ('CLARK', 'KENT', 1, 100000, 'C@WYNE.COM');
INSERT INTO EMPLOYEE (EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
 VALUES ('BARRY', 'ALLEN', 1, 100000, 'BA@WYNE.COM');
INSERT INTO EMPLOYEE (EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
 VALUES ('WALY', 'WEST', 1, 10000, 'KF@WYNE.COM');
INSERT INTO EMPLOYEE (EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
 VALUES ('BART', 'ALLEN', 1, 100000, 'IMP@WYNE.COM');
INSERT INTO EMPLOYEE (EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
 VALUES ('JAY', 'GARRICK', 1, 100000, 'E1@WYNE.COM');
 
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('JL'); 
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('IT'); 
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('JSA'); 

--UPDATED A ROW TO PREP FOR FOLLWING EXERCISE
UPDATE EMPLOYEE
SET DEPARTMENT_ID = 3
WHERE EMPLOYEE_FIRSTNAME = 'JAY';
/

--Create a stored procedure SP_GIVE_RAISE which takes in a DEPARTMENT_ID 
--and increases each employee's salary within the department by 10%, 
--and returns the new average salary for the department, 
--as well as a boolean value indicating whether the ID entered corresponds to a valid department. 
CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE (DEP_ID NUMBER)
--, AVG_SAL OUT NUMBER, IS_VALID OUT VARCHAR2
IS
BEGIN
    UPDATE EMPLOYEE SET SALARY = SALARY + (SALARY*.10)  
    WHERE DEPARTMENT_ID = DEP_ID;
END;
--VARIABLE X NUMBER;
--VARIABLE Y VARCHAR;
EXECUTE SP_GIVE_RAISE(3)



